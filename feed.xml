<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2022-06-03T17:11:10+08:00</updated><id>/feed.xml</id><title type="html">Franco blog</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">rust的map count使用笔记</title><link href="/rust/rust-count-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/" rel="alternate" type="text/html" title="rust的map count使用笔记" /><published>2022-06-03T11:08:30+08:00</published><updated>2022-06-03T11:08:30+08:00</updated><id>/rust/rust-count-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0</id><content type="html" xml:base="/rust/rust-count-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"><![CDATA[<h1 id="rust的map-count使用笔记">rust的map count使用笔记</h1>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fn main() {
        use std::collections::HashMap;
     
        let text = "hello world wonderful world";
     
        let mut map = HashMap::new();
     
        for word in text.split_whitespace() {
            let count = map.entry(word).or_insert(0);
            *count += 1;
        }
     
        println!("{:?}", map);
}
</code></pre></div></div>

<p>打印输出</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{"world": 2, "wonderful": 1, "hello": 1}
</code></pre></div></div>

<p>这里按照我们一般的编程习惯，没看到value从count赋值；原理是这样的，or_insert 方法返回这个键的值的一个可变引用（&amp;mut V）, count 获取到这个读写V, 整个map就把count包进来了，count有内存句柄了（所有权了），那么他就可以加1了，等下一个V又把内存句柄（所有权）给他，他就可以处理下一个加减了。</p>]]></content><author><name></name></author><category term="rust" /><category term="rust" /><summary type="html"><![CDATA[rust的map count使用笔记]]></summary></entry><entry><title type="html">webRTC和peerjs实现</title><link href="/jekyll/update/webRTC-peerjs/" rel="alternate" type="text/html" title="webRTC和peerjs实现" /><published>2022-04-22T11:08:30+08:00</published><updated>2022-04-22T11:08:30+08:00</updated><id>/jekyll/update/webRTC-peerjs</id><content type="html" xml:base="/jekyll/update/webRTC-peerjs/"><![CDATA[<h1 id="webrtc和peerjs实现">webRTC和peerjs实现</h1>

<h2 id="webrtc">webRTC</h2>

<p>webrtc的提供音视频解决方案是针对P2P的 场景，如果在实际的应用中直接通过P2P来互通，首先NAT穿越就很麻烦，如果NAT场景比较复杂，整个互通流程就会变长，直接的影响就是首屏会出来的慢。所以一般的会有一个webrtc接入服务来实现对web的接入，第一个是解决NAT穿越的问题，第二个是实现与具体的音视频业务的结合。</p>

<h2 id="ice概述">ICE概述</h2>

<p>​		- ICE全称Interactive Connectivity Establishment：交互式连通建立方式。</p>
<ul>
  <li>ICE参照RFC5245建议实现，是一组基于offer/answer模式解决NAT穿越的协议集合。</li>
  <li>它综合利用现有的STUN，TURN等协议，以更有效的方式来建立会话。</li>
  <li>
    <p>客户端侧无需关心所处网络的位置以及NAT类型，并且能够动态的发现最优的传输路径。</p>
  </li>
  <li>host 类型,即本机内网的 IP 和端口</li>
  <li>srflx 类型,即本机 NAT 映射后的外网的 IP 和端口</li>
  <li>relay 类型,即中继服务器的 IP 和端口</li>
</ul>

<h2 id="步骤">步骤</h2>

<p>分为三步：
   1.收集candidates</p>

<p>获取本机host address
   从STUN服务器获取srvflx address
   从TURN服务器获取relay address</p>

<h2 id="参考">参考</h2>
<p>https://blog.csdn.net/mo4776/article/details/116144513</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[webRTC和peerjs实现]]></summary></entry><entry><title type="html">cardano</title><link href="/jekyll/update/cardano-cip30/" rel="alternate" type="text/html" title="cardano" /><published>2022-04-21T14:08:30+08:00</published><updated>2022-04-21T14:08:30+08:00</updated><id>/jekyll/update/cardano-cip30</id><content type="html" xml:base="/jekyll/update/cardano-cip30/"><![CDATA[<p>cardano cip-30 signData</p>

<p>web3中用户与dapp打通的一个重要提案，在Cardano公链中的cip30,cip:Cardano Improvement Proposals .在深入介绍之前需要明白几个概念，可以更好理解后面的介绍。</p>

<h1 id="1-ed25519">1. ed25519</h1>

<p>ed25519 是基于Edwards曲线的数字签名算法（EdDSA），结合SHA-512/256哈希算法，采用扭曲爱德华曲线.</p>

<p>在cip30 的signData中用于签名用。在signData后返回的cose,Object Signing and Encryption (COSE)中包含。</p>

<p>签名的CBOR（Concise Binary Object Representation）返回数据结构</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="s2">```
COSE_Sign1 = [
    Headers,
    payload : bstr / nil,
    signature : bstr
]
```</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[cardano cip-30 signData]]></summary></entry></feed>